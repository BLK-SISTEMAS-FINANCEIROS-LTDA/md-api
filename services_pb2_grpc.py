# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import book_pb2 as book__pb2
import broker_pb2 as broker__pb2
import common_pb2 as common__pb2
import login_pb2 as login__pb2
import quote_pb2 as quote__pb2
import security_pb2 as security__pb2
import subscription_pb2 as subscription__pb2
import trades_pb2 as trades__pb2


class AuthenticationSvcStub(object):
  """———————————————————————————————————————————————————————————————————————————————————————————————————————

  Serviço de autenticação
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.Login = channel.unary_unary(
        '/AuthenticationSvc/Login',
        request_serializer=login__pb2.Login.SerializeToString,
        response_deserializer=login__pb2.AccessToken.FromString,
        )


class AuthenticationSvcServicer(object):
  """———————————————————————————————————————————————————————————————————————————————————————————————————————

  Serviço de autenticação
  """

  def Login(self, request, context):
    """Login no sistema de autenticação
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_AuthenticationSvcServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'Login': grpc.unary_unary_rpc_method_handler(
          servicer.Login,
          request_deserializer=login__pb2.Login.FromString,
          response_serializer=login__pb2.AccessToken.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'AuthenticationSvc', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))


class BooksSvcStub(object):
  """———————————————————————————————————————————————————————————————————————————————————————————————————————

  Chamadas de procedimento remoto para dados de livro de ofertas
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.GetBookByPriceSnapshot = channel.unary_unary(
        '/BooksSvc/GetBookByPriceSnapshot',
        request_serializer=book__pb2.BookRequest.SerializeToString,
        response_deserializer=book__pb2.BookByPrice.FromString,
        )
    self.GetBookByOrderSnapshot = channel.unary_unary(
        '/BooksSvc/GetBookByOrderSnapshot',
        request_serializer=book__pb2.BookRequest.SerializeToString,
        response_deserializer=book__pb2.BookByOrder.FromString,
        )
    self.GetBookByOrderStream = channel.unary_stream(
        '/BooksSvc/GetBookByOrderStream',
        request_serializer=book__pb2.BookRequest.SerializeToString,
        response_deserializer=book__pb2.BookByOrderIncrement.FromString,
        )
    self.GetBookByPriceStream = channel.unary_stream(
        '/BooksSvc/GetBookByPriceStream',
        request_serializer=book__pb2.BookRequest.SerializeToString,
        response_deserializer=book__pb2.BookByPriceIncrement.FromString,
        )


class BooksSvcServicer(object):
  """———————————————————————————————————————————————————————————————————————————————————————————————————————

  Chamadas de procedimento remoto para dados de livro de ofertas
  """

  def GetBookByPriceSnapshot(self, request, context):
    """Retorna um instantâneo de dados de livro de ofertas agregado para 
    determinado ativo
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def GetBookByOrderSnapshot(self, request, context):
    """Retorna um instantâneo de dados de livro de ofertas completo para 
    determinado ativo
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def GetBookByOrderStream(self, request, context):
    """Retorna um fluxo de dados de livro de ofertas completo para determinado ativo
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def GetBookByPriceStream(self, request, context):
    """Retorna um fluxo de dados de livro de ofertas agregado para determinado ativo
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_BooksSvcServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'GetBookByPriceSnapshot': grpc.unary_unary_rpc_method_handler(
          servicer.GetBookByPriceSnapshot,
          request_deserializer=book__pb2.BookRequest.FromString,
          response_serializer=book__pb2.BookByPrice.SerializeToString,
      ),
      'GetBookByOrderSnapshot': grpc.unary_unary_rpc_method_handler(
          servicer.GetBookByOrderSnapshot,
          request_deserializer=book__pb2.BookRequest.FromString,
          response_serializer=book__pb2.BookByOrder.SerializeToString,
      ),
      'GetBookByOrderStream': grpc.unary_stream_rpc_method_handler(
          servicer.GetBookByOrderStream,
          request_deserializer=book__pb2.BookRequest.FromString,
          response_serializer=book__pb2.BookByOrderIncrement.SerializeToString,
      ),
      'GetBookByPriceStream': grpc.unary_stream_rpc_method_handler(
          servicer.GetBookByPriceStream,
          request_deserializer=book__pb2.BookRequest.FromString,
          response_serializer=book__pb2.BookByPriceIncrement.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'BooksSvc', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))


class QuotesSvcStub(object):
  """———————————————————————————————————————————————————————————————————————————————————————————————————————

  Chamadas de procedimento remoto para dados de cotação
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.GetQuoteSnapshot = channel.unary_unary(
        '/QuotesSvc/GetQuoteSnapshot',
        request_serializer=common__pb2.SecuritySymbolOrId.SerializeToString,
        response_deserializer=quote__pb2.Quote.FromString,
        )
    self.GetQuoteStream = channel.unary_stream(
        '/QuotesSvc/GetQuoteStream',
        request_serializer=common__pb2.SecuritySymbolOrId.SerializeToString,
        response_deserializer=quote__pb2.QuoteUpdate.FromString,
        )


class QuotesSvcServicer(object):
  """———————————————————————————————————————————————————————————————————————————————————————————————————————

  Chamadas de procedimento remoto para dados de cotação
  """

  def GetQuoteSnapshot(self, request, context):
    """Retorna um instantâneo de dados de cotação para determinado ativo
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def GetQuoteStream(self, request, context):
    """Retorna um fluxo de dados de cotação para determinado ativo.
    Primeiro valor retornado é sempre um instantâneo (snapshot).
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_QuotesSvcServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'GetQuoteSnapshot': grpc.unary_unary_rpc_method_handler(
          servicer.GetQuoteSnapshot,
          request_deserializer=common__pb2.SecuritySymbolOrId.FromString,
          response_serializer=quote__pb2.Quote.SerializeToString,
      ),
      'GetQuoteStream': grpc.unary_stream_rpc_method_handler(
          servicer.GetQuoteStream,
          request_deserializer=common__pb2.SecuritySymbolOrId.FromString,
          response_serializer=quote__pb2.QuoteUpdate.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'QuotesSvc', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))


class ReferenceDataSvcStub(object):
  """———————————————————————————————————————————————————————————————————————————————————————————————————————

  Chamadas de procedimento remoto para ativos
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.GetSecurities = channel.unary_unary(
        '/ReferenceDataSvc/GetSecurities',
        request_serializer=common__pb2.Empty.SerializeToString,
        response_deserializer=security__pb2.Securities.FromString,
        )
    self.GetBrokers = channel.unary_unary(
        '/ReferenceDataSvc/GetBrokers',
        request_serializer=common__pb2.Empty.SerializeToString,
        response_deserializer=broker__pb2.Brokers.FromString,
        )


class ReferenceDataSvcServicer(object):
  """———————————————————————————————————————————————————————————————————————————————————————————————————————

  Chamadas de procedimento remoto para ativos
  """

  def GetSecurities(self, request, context):
    """Retorna uma lista de todos os ativos disponíveis na API
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def GetBrokers(self, request, context):
    """Retorna uma lista de corretoras na API
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_ReferenceDataSvcServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'GetSecurities': grpc.unary_unary_rpc_method_handler(
          servicer.GetSecurities,
          request_deserializer=common__pb2.Empty.FromString,
          response_serializer=security__pb2.Securities.SerializeToString,
      ),
      'GetBrokers': grpc.unary_unary_rpc_method_handler(
          servicer.GetBrokers,
          request_deserializer=common__pb2.Empty.FromString,
          response_serializer=broker__pb2.Brokers.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'ReferenceDataSvc', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))


class SubscriptionSvcStub(object):
  """———————————————————————————————————————————————————————————————————————————————————————————————————————

  Chamadas de procedimento para monitoramento de status de assinatura
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.GetSubscriptionStatus = channel.unary_unary(
        '/SubscriptionSvc/GetSubscriptionStatus',
        request_serializer=common__pb2.Empty.SerializeToString,
        response_deserializer=subscription__pb2.SubscriptionStatus.FromString,
        )


class SubscriptionSvcServicer(object):
  """———————————————————————————————————————————————————————————————————————————————————————————————————————

  Chamadas de procedimento para monitoramento de status de assinatura
  """

  def GetSubscriptionStatus(self, request, context):
    """Retorna status de assinatura
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_SubscriptionSvcServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'GetSubscriptionStatus': grpc.unary_unary_rpc_method_handler(
          servicer.GetSubscriptionStatus,
          request_deserializer=common__pb2.Empty.FromString,
          response_serializer=subscription__pb2.SubscriptionStatus.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'SubscriptionSvc', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))


class TradesSvcStub(object):
  """———————————————————————————————————————————————————————————————————————————————————————————————————————

  Chamadas de procedimento para negócios realizados
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.GetTradesSnapshot = channel.unary_unary(
        '/TradesSvc/GetTradesSnapshot',
        request_serializer=trades__pb2.TradesRequest.SerializeToString,
        response_deserializer=trades__pb2.Trades.FromString,
        )
    self.GetTradesStream = channel.unary_stream(
        '/TradesSvc/GetTradesStream',
        request_serializer=trades__pb2.TradesRequest.SerializeToString,
        response_deserializer=trades__pb2.Trade.FromString,
        )


class TradesSvcServicer(object):
  """———————————————————————————————————————————————————————————————————————————————————————————————————————

  Chamadas de procedimento para negócios realizados
  """

  def GetTradesSnapshot(self, request, context):
    """Retorna uma lista dos negócios mais recentes realizados no dia corrente 
    com extensão customizada. Length = -1 retorna todos os negócios
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def GetTradesStream(self, request, context):
    """Retorna um fluxo de dados em tempo real contendo os negócios realizados.
    Dados podem ser precedidos pelos negócios realizados anteriormente à chamada,
    bastando especificar o parâmetro length (-1 para todos).
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_TradesSvcServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'GetTradesSnapshot': grpc.unary_unary_rpc_method_handler(
          servicer.GetTradesSnapshot,
          request_deserializer=trades__pb2.TradesRequest.FromString,
          response_serializer=trades__pb2.Trades.SerializeToString,
      ),
      'GetTradesStream': grpc.unary_stream_rpc_method_handler(
          servicer.GetTradesStream,
          request_deserializer=trades__pb2.TradesRequest.FromString,
          response_serializer=trades__pb2.Trade.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'TradesSvc', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
